#!/usr/bin/env python3

import sqlite3
from systemd import journal
from datetime import datetime
from operator import itemgetter
import npyscreen
import subprocess

class TLDatabase(object):
    '''Создает и наполняет базу данных записями терминальных сессий tlog'''
    def __init__(self, filename="tldatabase.db"):
        self.dbfilename = filename
        db = sqlite3.connect(self.dbfilename)
        c = db.cursor()
        c.execute(
        "CREATE TABLE IF NOT EXISTS tlrecords\
            ( tl_id INTEGER PRIMARY KEY, \
              rec     TEXT, \
              tl_date TEXT, \
              tl_time TEXT, \
              user   TEXT, \
              message TEXT, \
              hostname TEXT \
              )" \
            )
        db.commit()
        c.close()

    def list_all_records(self):
        db = sqlite3.connect(self.dbfilename)
        c = db.cursor()
        #Поиск записей по диапазону дат
        #c.execute('SELECT tl_id, user, tl_date, tl_time, hostname FROM tlrecords WHERE tl_date BETWEEN "12.09.2022" AND "12.09.2022"')
        c.execute('SELECT tl_id, user, tl_date, tl_time, hostname FROM tlrecords ORDER BY tl_date DESC, tl_time DESC')
        records = c.fetchall()
        c.close()
        return records

    def get_record(self, record_id):
        db = sqlite3.connect(self.dbfilename)
        c = db.cursor()
        c.execute('SELECT tl_id, rec, hostname, user, tl_date, tl_time, message FROM tlrecords WHERE tl_id=?', (record_id,))
        records = c.fetchall()
        c.close()
        return records[0]

    def play_record(self, rec_id):
        tlog_rec = f'TLOG_REC={rec_id}'
        result = subprocess.run(['tlog-play', '-r', 'journal', '-M', tlog_rec])

class RecordList(npyscreen.MultiLineAction):
    def __init__(self, *args, **keywords):
        super(RecordList, self).__init__(*args, **keywords)
        self.add_handlers({
            "^A": self.when_add_record,
        })
    
    def display_value(self, vl):
        #форматируем отображаемый текст
        vl_records = f"{vl[1]:<20} {vl[2]:<15} {vl[3]:<15} {vl[4]:<15}"
        return vl_records

    def actionHighlighted(self, act_on_this, keypress):
        self.parent.parentApp.getForm('EDITRECORDFM').value =act_on_this[0]
        self.parent.parentApp.switchForm('EDITRECORDFM')

    def when_add_record(self, *args, **keywords):
        self.parent.parentApp.getForm('EDITRECORDFM').value = None
        self.parent.parentApp.switchForm('EDITRECORDFM')

class RecordListDisplay(npyscreen.FormMutt):
    MAIN_WIDGET_CLASS = RecordList
    def beforeEditing(self):
        self.update_list()

    def update_list(self):
        self.wStatus1.value = "Воспроизведение терминальных сессий tlog"
        self.wStatus2.value = 'Для выхода нажмите Ctrl+C'
        self.wCommand.value = 'Для поиска по дате нажмите Ctrl+S'

        self.wMain.values = self.parentApp.myDatabase.list_all_records()
        self.wMain.display()

class EditRecord(npyscreen.ActionForm):
    def create(self):
        self.value = None
        self.wgrecid = self.add(npyscreen.TitleText, name = "RecID",)
        self.wghostname = self.add(npyscreen.TitleText, name = "Hostname")
        self.wguser = self.add(npyscreen.TitleText, name = "User")
        self.wgdate = self.add(npyscreen.TitleText, name = "Date")
        self.wgtime = self.add(npyscreen.TitleText, name = "Time")
        self.wgmessage = self.add(npyscreen.TitleText, name = "Message")
        self_check = self.add(npyscreen.MultiLineEdit, value = """Для воспроизведения записи нажмите ОК\nДля возврата на главный экран нажмите Cancel\n""", 
            max_height=5, rely=9)

    def beforeEditing(self):
        record = self.parentApp.myDatabase.get_record(self.value)
        self.name = "Текущая запись: %s" % record[0]
        self.record_id = record[0]
        self.rec_id = record[1]
        self.wgrecid.value = record[1]
        self.wghostname.value = record[2]
        self.wguser.value = record[3]
        self.wgdate.value  = record[4]
        self.wgtime.value      = record[5]
        self.wgmessage.value = f'{record[6]:10}'

    def on_ok(self):
        self.erase()
        self.parentApp.myDatabase.play_record(self.rec_id)
        self.parentApp.switchFormPrevious()

    def on_cancel(self):
        self.parentApp.switchFormPrevious()

class TLApplication(npyscreen.NPSAppManaged):
    def onStart(self):
        self.myDatabase = TLDatabase()
        self.addForm("MAIN", RecordListDisplay)
        self.addForm("EDITRECORDFM", EditRecord)
    def on_ok(self):
        self.parentApp.setNextForm(None)

if __name__ == '__main__':
    try:
        myApp = TLApplication()
        myApp.run()
    except KeyboardInterrupt:
        pass

